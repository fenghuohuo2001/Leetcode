#include<vector>

/*
插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，
因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，
它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。

1. 算法步骤
将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。
从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。
（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）
*/

// 2024-1-18 有点难理解 用数组 1， 3， 2 举例子
template<typename T>
void inset_sort(T arr[], int len)
{
    // 外层循环从数组的第二个元素开始，到最后一个元素
    for(int i=1; i<len; i++)    // 从第一个开始     i = 1;                                           i = 2
    {   
        // 选取当前元素作为关键元素（待插入元素） 用key存储了元素
        int key=arr[i];                     //      key = arr[1] = 3;                               key = arr[2] = 2

        // 内层循环：将关键元素插入已排序的序列中
        int j = i-1;                        //      j = 1 - 1 = 0;                                  j = 2 - 1 = 1
        while((j>=0) && (key<arr[j]))       //      j = 0, key = 3 >  arr[j] = arr[0] = 1;          j = 1, key = 2 < arr[j] = arr[1] = 3
        {
            // 将比关键元素大的元素后移一位
            arr[j+1]=arr[j];                //      none;                                           arr[j+1]=arr[2]=2 = arr[j]=arr[1]=3;
            j--;                            //      none;                                           j=0
        }
        arr[j + 1] = key;                   // arr[1] = 3;                                          arr[2] = 2;
    }
}


void insert_sort(int arr[], int len)
{
    for(int i=1; i<len-1; i++)
    {
        int key = arr[i];
        int j = i - 1;
        while((j >= 0)&& (arr[j] > key))
        {
            arr[j+1]=arr[j];    // 向后挪
            j--;
        }
        arr[j+1]=key;           // 插入提出来的数
    }
}